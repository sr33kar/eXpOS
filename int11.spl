alias userSP R0;
userSP=SP;
alias physicalPageNum R1;
alias offset R2;
alias syscall R3;
alias syscalladr R4;

physicalPageNum = [PTBR + 2 * ((userSP - 5)/ 512)];
offset = (userSP - 5) % 512;
syscalladr = (physicalPageNum * 512) + offset;
syscall=[syscalladr];


[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13]=SP;
SP=([PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11])*512-1;



if(syscall==13)then

[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=13;

alias w_pid R5;
w_pid=[[PTBR+2*((userSP-4)/512)]*512 +(userSP - 4) % 512];

breakpoint;
if([SYSTEM_STATUS_TABLE+1]==w_pid || [PROCESS_TABLE+16*w_pid+4]==TERMINATED ||  w_pid>15 || w_pid<1 )then
	breakpoint;
	[[PTBR+2*((userSP-1)/512)]* 512 +(userSP - 1) % 512]=-1;
	[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
	SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
	ireturn;
endif;
breakpoint;
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4]=WAIT_PROCESS;
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+5]=w_pid;
multipush(R0,R1,R2,R3,R4,R5);
call SCHEDULER;
multipop(R0,R1,R2,R3,R4,R5);
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;

endif;


if(syscall==14)then
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=14;

alias pid R5;
pid=0;
while(pid<16)do
if([PROCESS_TABLE+16*pid+4]==WAIT_PROCESS && [PROCESS_TABLE+16*pid+5]== [SYSTEM_STATUS_TABLE+1])then
[PROCESS_TABLE+16*pid+4]=READY;
endif;
endwhile;
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
[[PTBR+2*((userSP-4)/512)] * 512 +(userSP - 1) % 512]=0;

endif;

if(syscall==11)then
[[PTBR+2*((userSP-1)/512)]* 512 +(userSP - 1) % 512]=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+1];
endif;

if(syscall==12)then
[[PTBR+2*((userSP-1)/512)]* 512 +(userSP - 1) % 512]=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+2];
endif;

[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
	SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
	ireturn;
