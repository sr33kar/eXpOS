[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=7;
alias userSP R10;
userSP=SP;
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13]=SP;
SP=([PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11])*512-1;
alias retval R12;
retval=([PTBR+2*((userSP-1)/512)]*512) + ((userSP-1)%512);
breakpoint;
alias filedescriptor R4;
filedescriptor=[[PTBR+2*(userSP-4)/512]*512 + (userSP-4)%512];

alias word R3;
	word=[[PTBR+2*((userSP-3)/512)]*512+((userSP-3)%512)];
alias buffadd R5;
	buffadd=[PTBR+2*(word/512)]*512+(word%512);
if(filedescriptor==-1) then 	
	multipush(R0,R1,R2,R3,R4,R5,R9,R10,R12);
	alias terminalread R1;
	alias curpid R2;
	alias cur R3;
	terminalread=4;
	curpid=[SYSTEM_STATUS_TABLE+1];
	cur=word;
	call MOD_4;
	multipop(R0,R1,R2,R3,R4,R5,R9,R10,R12);
	
else


	if(filedescriptor<0 || filedescriptor>7)then
		[retval]=-1;
		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
		SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
		ireturn;
	endif;	
	alias ppr R8;
	ppr=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512+496;
	
	if([ppr+2*filedescriptor]!=0)then	
		[retval]=-1;
		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
		SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
		ireturn;
	endif;

	alias o_index R6;
	o_index=[ppr+2*filedescriptor+1];

	alias in_entry R7;
	in_entry=[OPEN_FILE_TABLE+(o_index*4)];
	
	multipush(R1,R2,R3,R4,R5,R6,R8,R9,R10,R12);
	alias functionnum R1;
	functionnum=4;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R8,R9,R10,R12);

	if(R0==-1)then
	[retval]=-1;
		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
		SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
		ireturn;
	endif;	
	
	alias lseek R9;
	lseek=[OPEN_FILE_TABLE+(o_index*4)+2];
	if(in_entry==INODE_ROOT)then
		if(lseek==480)then
		
		multipush(R1,R2,R3,R4,R5,R6,R8,R9,R10,R12);
		alias functionnum R1;
		functionnum=5;
		call MOD_0;
		multipop(R1,R2,R3,R4,R5,R6,R8,R9,R10,R12);		

			[retval]=-2;
			[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
			SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
			ireturn;
		endif;	
		[buffadd]=[ROOT_FILE+lseek];
		[OPEN_FILE_TABLE+(o_index*4)+2]=[OPEN_FILE_TABLE+(o_index*4)+2]+1;
	else
		if(lseek==[INODE_TABLE+(in_entry*16)+2])then
			multipush(R1,R2,R3,R4,R5,R6,R8,R9,R10,R12);
			alias functionnum R1;
			functionnum=5;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R8,R9,R10,R12);		
	
			[retval]=-2;
			[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
			SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
			ireturn;
		else
			alias blknum R1;
			blknum=lseek/512;
			alias disk_num R2;
			disk_num=[INODE_TABLE+16*in_entry+blknum+8];
			alias offset R11;
			offset=lseek%512;
	
	
			multipush(R1,R3,R4,R6,R7,R8,R9,R10,R12);
			alias functionnum R1;
			functionnum=2;
			R3=offset;
			R4=buffadd;
			call MOD_3;
			multipop(R1,R3,R4,R6,R7,R8,R9,R10,R12);	
		breakpoint;		
	
			[OPEN_FILE_TABLE+(o_index*4)+2]=[OPEN_FILE_TABLE+(o_index*4)+2]+1;
			[retval]=0;
		
		endif;
	endif;
	multipush(R1,R2,R3,R4,R5,R6,R8,R9,R10,R12);
		alias functionnum1 R1;
		functionnum1=5;
		call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R8,R9,R10,R12);
endif;
	


[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
SP=userSP;
ireturn;
