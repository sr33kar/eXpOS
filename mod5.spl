


SP = SP + 1;
[SP] = BP;


	

alias currentPID R4;
currentPID = [SYSTEM_STATUS_TABLE + 1];


alias flag R11;
flag=0;
alias PID R12;
PID=1;
while(PID!=0)do

if([PROCESS_TABLE + PID*16 + 4]==TERMINATED) then
	flag=flag+1;
	endif;
PID=(PID+1)%16;
endwhile;

if(flag==15)then
halt;
endif;

alias current_process_table R5;
current_process_table =  PROCESS_TABLE + currentPID*16;

[current_process_table + 12] = SP % 512;
[current_process_table + 14] = PTBR;
[current_process_table + 15] = PTLR;

alias newPID1 R6;
alias newPID R7;
alias count R8;
count = 0;
newPID1 = currentPID;
currentPID = (currentPID + 1)%16;

	while(currentPID != newPID1) do
		if([PROCESS_TABLE + currentPID*16 + 4] == READY || [PROCESS_TABLE + currentPID*16 + 4] == CREATED  ) then
			newPID = currentPID;
			count = 1;
			break;
		endif;
		currentPID = (currentPID + 1)%16;
	endwhile;
	if(count != 1)then
		newPID = 0;
	endif;
	
	
alias new_process_table R9;
new_process_table = PROCESS_TABLE + newPID*16;
SP = [new_process_table + 11]* 512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];


if([new_process_table + 4] == CREATED) then
	        [SYSTEM_STATUS_TABLE + 1] = newPID;
	        SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
		BP= [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11]*512];
	        [new_process_table + 4] = RUNNING;
	        [new_process_table + 9] = 0;
        	
	ireturn;
endif;
[new_process_table + 4] = RUNNING;
[SYSTEM_STATUS_TABLE + 1] = newPID;
BP = [SP];
SP = SP - 1;
return;

