alias functionNum R1;
alias currentpid R2;

if(functionNum==1)then
alias pid R2;
alias ret R0;

pid=1;
while(pid!=16)do
		if([PROCESS_TABLE+pid*16+4]==TERMINATED)then
			ret=pid;
			[PROCESS_TABLE+pid*16+1]=pid;
			[PROCESS_TABLE+(pid*16)+14]=PAGE_TABLE_BASE+20*pid;
			[PROCESS_TABLE+(pid*16)+15]=10;
			[PROCESS_TABLE+(pid*16)+4]=ALLOCATED;		
			return ;
		endif;
pid=pid+1;
endwhile;
ret=-1;
return;
endif;


if(functionNum==2)then
alias fun_Num1 R1;
alias argPID R2;
alias ppr R4;
ppr= [PROCESS_TABLE+argPID*16+11]*512+496;
alias cnt R5;
cnt=0;
while(cnt<16)do
if([ppr+cnt]==1 || [ppr+cnt]==0)then
	if([ppr+cnt]==1)then
		R6=[ppr+cnt+1];
		multipush(R0,R1,R2,R3,R4,R5);
		alias semid R3;
		semid=R6;
		fun_Num1=7;
		call MOD_0;
		multipop(R0,R1,R2,R3,R4,R5);
	endif;
	if([ppr+cnt]==0)then
		R6=[ppr+cnt+1];
		multipush(R0,R1,R2,R3,R4,R5);
		alias fid R4;
		fid=R6;
		fun_Num1=4;
		call MOD_3;
		multipop(R0,R1,R2,R3,R4,R5);
	endif;
endif;
cnt=cnt+2;
endwhile;

multipush(R0,R1,R2,R3,R4,R5,R6);
alias  fun_Num2 R1;
alias  pagenum R3;
fun_Num2=2;
pagenum=[PROCESS_TABLE+argPID*16+11];
call MOD_2;
multipop(R0,R1,R2,R3,R4,R5,R6);

return;
endif;



if(functionNum==3)then
breakpoint;
alias argPID R2;

if([PROCESS_TABLE+argPID*16+9]!=9)then

alias pid R3;
pid=0;
while(pid<16)do
if([PROCESS_TABLE+16*pid+4]==WAIT_PROCESS && [PROCESS_TABLE+16*pid+5]== argPID)then
[PROCESS_TABLE+16*pid+4]=READY;
[PROCESS_TABLE+16*pid+5]=-1;
endif;
pid=pid+1;
endwhile;


endif;
multipush(R1,R3,R4,R5);
alias  fun_Num2 R1;
R2=argPID;
fun_Num2=4;
call MOD_1;

multipop(R1,R3,R4,R5);


multipush(R1);
alias  fun_Num3 R1;
R2=argPID;
fun_Num3=2;
call MOD_1;
multipop(R1);

[PROCESS_TABLE+argPID*16+4]=TERMINATED;
return;
endif;




if(functionNum==4)then
alias pid R2;
PTBR= [PROCESS_TABLE+pid*16+14];

[PTBR]=-1;
[PTBR+1]="0000";
[PTBR+2]=-1;
[PTBR+3]="0000";

alias count  R3;
count=4;

while(count<20)do

if([PTBR+count]!=-1)then

multipush(R0,R1,R2,R3);
alias  fun_Num4 R1;
fun_Num4=2;
alias pageno R3;
pageno=[PTBR+count];
call MOD_2;
multipop(R0,R1,R2,R3);

[PTBR + count] = -1;
[PTBR + count+1] ="0000";
endif;
count=count+2;
endwhile;

alias disk_map R4;
disk_map = DISK_MAP_TABLE + pid*10;

alias count3 R5;
count3 = 2;
while(count3 < 10) do
if([disk_map + count3] != -1) then

multipush(R0,R1,R2,R3,R4,R5);
alias funnum4 R1;
alias blocknum R2;
funnum4 = 4;
blocknum = [disk_map + count3];
call MOD_2;
multipop(R0,R1,R2,R3,R4,R5);

endif;
if(count3 == 3) then
count3 = count3 + 5;
else
count3 = count3 + 1;
endif;
endwhile;
count3=0;
while(count3!=10)do
[disk_map + count3] = -1;
count3=count3+1;
endwhile;

return;
endif;

if(functionNum==5)then
	breakpoint;
	alias in_en R7;
	in_en=1;
	while(in_en!=60)do
		if([INODE_TABLE+in_en*16]==2)then
		multipush(R0,R1,R2,R3,R4,R5);
		alias funnum4 R1;
		funnum4 = 4;
		R7=in_en;
		call MOD_0;
		multipop(R0,R1,R2,R3,R4,R5);
		endif;
	in_en=in_en+1;
	endwhile;

alias pid R2;
pid=2;
	while(pid!=16)do
	if(pid!=[SYSTEM_STATUS_TABLE+1] && [PROCESS_TABLE+pid*16+4]!= TERMINATED)then
		multipush(R0,R1,R3,R4,R5);
		alias funnum4 R1;
		funnum4 = 3;
		call MOD_1;
		multipop(R0,R1,R3,R4,R5);
	endif;
	pid=pid+1;
	endwhile;
	
	in_en=1;
	while(in_en!=60)do
		if([INODE_TABLE+in_en*16]==2)then
		multipush(R0,R1,R2,R3,R4,R5);
		alias funnum4 R1;
		funnum4 = 5;
		call MOD_0;
		multipop(R0,R1,R2,R3,R4,R5);
		endif;
	in_en=in_en+1;
	endwhile;
return;
endif;
