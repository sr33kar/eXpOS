alias userSP R0;
userSP=SP;
alias physicalPageNum R1;
alias offset R2;
alias syscall R3;
alias syscalladr R4;

physicalPageNum = [PTBR + 2 * ((userSP - 5)/ 512)];
offset = (userSP - 5) % 512;
syscalladr = (physicalPageNum * 512) + offset;
syscall=[syscalladr];


[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13]=SP;
SP=([PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11])*512-1;


if(syscall==19)then

[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=19;
alias semid R5;
	semid=[[PTBR+2*((userSP-4)/512)]*512 +(userSP - 4) % 512];
	
	if(semid<0 ||semid>7)then
	[[PTBR + 2 * ((userSP - 1)/ 512)]*512+(userSP - 1) % 512]=-1;
	
		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
		SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
		ireturn;	
	endif;	

	alias ppr R7;
	ppr=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512+496;
	alias sem R6;
	sem=[ppr+2*semid];
	alias sid R8;
	sid=[ppr+2*semid+1];
	if(sem==1)then
	while([SEMAPHORE_TABLE+sid*4]!=-1)do
		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4]=WAIT_SEMAPHORE;
		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+5]=sid;
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
		call SCHEDULER;
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);		
	endwhile;
	[SEMAPHORE_TABLE+sid*4]=[SYSTEM_STATUS_TABLE+1];
	[[PTBR + 2 * ((userSP - 1)/ 512)]*512+(userSP - 1) % 512]=0;
	endif;
endif;

if(syscall==20)then

[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=20;

alias semid1 R5;
	semid1=[[PTBR+2*((userSP-4)/512)]*512 +(userSP - 4) % 512];
	
	if(semid1<0 ||semid1>7)then
	[[PTBR + 2 * ((userSP - 1)/ 512)]*512+(userSP - 1) % 512]=-1;
		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
		SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
		ireturn;	
	endif;	
	alias ppr1 R7;
	ppr1=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512+496;
	alias sem1 R6;
	sem1=[ppr1+2*semid1];
	alias sid1 R8;
	sid1=[ppr1+2*semid1+1];
	if(sem1==1)then
	if([SEMAPHORE_TABLE+sid1*4]!=-1)then
		if([SEMAPHORE_TABLE+sid1*4]!=[SYSTEM_STATUS_TABLE+1])then
		[[PTBR + 2 * ((userSP - 1)/ 512)]*512+(userSP - 1) % 512]=-2;
		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
		SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
		ireturn;
		endif;	
		[SEMAPHORE_TABLE+sid1*4]=-1;

		alias index R9;
		index=2;
		while(index<16)do
		if([PROCESS_TABLE+index*16+4]==WAIT_SEMAPHORE && [PROCESS_TABLE+index*16+5]==sid1 )then
			[PROCESS_TABLE+index*16+4]=READY;
		endif;
		index=index+1;		
		endwhile;
	endif;
	endif;	
endif;
	
	[[PTBR + 2 * ((userSP - 1)/ 512)]*512+(userSP - 1) % 512]=0;
	[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
	SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
	ireturn;
