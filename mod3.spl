alias functionnum R1;


if(functionnum==2 || functionnum==1)then

alias disk_num R2;
alias offset R3;
alias buffer R4;

alias buffnum R6;
buffnum=disk_num % 4;

multipush(R1,R2,R3,R4,R5,R7,R8,R9);
alias functionnum1 R1;
functionnum1=1;
call MOD_0;
multipop(R1,R2,R3,R4,R5,R7,R8,R9);


if([BUFFER_TABLE+4*buffnum]!=disk_num)then

if([BUFFER_TABLE+4*buffnum+1]==1)then
	R7=[BUFFER_TABLE+4*buffnum];
	
multipush(R1,R2,R3,R4,R5,R8,R9);
alias functionnum1 R1;
functionnum1=1;
R3=71+buffnum;
R4=R7;
call MOD_4;
multipop(R1,R2,R3,R4,R5,R8,R9);

if(functionnum==2)then
[BUFFER_TABLE+4*buffnum]=-1;
[BUFFER_TABLE+4*buffnum+1]=-1;
[BUFFER_TABLE+4*buffnum+2]=-1;
[BUFFER_TABLE+4*buffnum+3]=-1;
endif;


endif;


multipush(R1,R3,R4,R5,R8,R9);
alias functionnum1 R1;
functionnum1=2;
R3=71+buffnum;
R4=R2;
call MOD_4;
multipop(R1,R3,R4,R5,R8,R9);
[BUFFER_TABLE+4*buffnum]=disk_num;

endif;


if(functionnum==2)then
[buffer]=[(71+buffnum)*512+offset];
else
[(71+buffnum)*512+offset]=buffer;
[BUFFER_TABLE+4*buffnum+1]=1;
endif;


multipush(R1,R2,R3,R4,R5,R7,R8,R9);
alias functionnum2 R1;
functionnum2=2;
call MOD_0;
multipop(R1,R2,R3,R4,R5,R7,R8,R9);
return;

endif;



if(functionnum==3)then
alias index R2;
index=0;
alias count1 R3;
count1=0;
alias filename R5;
while(index<60)do
	if (filename==[INODE_TABLE+16*index+1] && [INODE_TABLE+16*index+0]==2 )then		
        		break;
	endif;
	index=index+1;
endwhile;

if(index==60)then
R0=-1;
endif;
R7=index;
multipush(R1,R2,R3,R4,R5,R6);
alias functionNum1 R1;
functionNum1=4;
call MOD_0;

multipop(R1,R2,R3,R4,R5,R6);

if(R0==-1)then
R0=-1;
return;
endif;

alias o_index R4;
o_index=0;
	while(o_index<32)do	
	if([OPEN_FILE_TABLE+o_index*4]==-1)then
	break;
	endif;
	o_index=o_index+1;
	endwhile;

	if(o_index==32)then
	
	multipush(R1,R2,R3,R4,R5,R6);
	alias functionNum1 R1;
	functionNum1=5;
	call MOD_0;	
	multipop(R1,R2,R3,R4,R5,R6);	
	
	R0=-2;
	return;
	endif;
	
	
if(filename=="root")then
[OPEN_FILE_TABLE+o_index*4]=INODE_ROOT;
else
    if([FILE_STATUS_TABLE+index*4+1]==-1)then
	[FILE_STATUS_TABLE+index*4+1]=1;
    else
	[FILE_STATUS_TABLE+index*4+1]=[FILE_STATUS_TABLE+index*4+1]+1;
    endif;
    [OPEN_FILE_TABLE+o_index*4]=index;
endif;

[OPEN_FILE_TABLE+o_index*4+1]=1;
[OPEN_FILE_TABLE+o_index*4+2]=[INODE_TABLE+index*16+2];

R7=index;

	multipush(R1,R2,R3,R4,R5,R6);
	alias functionNum2 R1;
	functionNum2=5;
	call MOD_0;	
	multipop(R1,R2,R3,R4,R5,R6);
R0=o_index;
return;
endif;


if(functionnum==4)then
print "close";
alias o_index R4;
alias index R5;
index=[OPEN_FILE_TABLE+4*o_index];
[OPEN_FILE_TABLE+4*o_index+1]=[OPEN_FILE_TABLE+4*o_index+1]-1;
if([OPEN_FILE_TABLE+4*o_index+1]==0)then
	[OPEN_FILE_TABLE+4*o_index]=-1;
	[OPEN_FILE_TABLE+4*o_index+1]=-1;
	[OPEN_FILE_TABLE+4*o_index+2]=-1;
	[OPEN_FILE_TABLE+4*o_index+3]=-1;
	
	if(index!=0)then
	[FILE_STATUS_TABLE+index*4+1]=[FILE_STATUS_TABLE+index*4+1]-1;	
	endif;
	
	if([FILE_STATUS_TABLE+index*4+1]==0)then
	[FILE_STATUS_TABLE+index*4+1]=-1;
	endif;
endif;
return;
endif;
